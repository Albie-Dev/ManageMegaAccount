<div id="sidebarDiv">
    <button id="sidebarToggleBtn" class="rounded" aria-label="Toggle Sidebar" @onclick="ToggleSidebar">
        <i id="sidebarToggleIcon" class="bi @(isSidebarCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></i>
    </button>

    <div id="sidebar" class="border border-1 @(isSidebarCollapsed ? "collapsed" : "")">
        <div class="sidebar-header border-bottom">
            Sidebar
        </div>
        @foreach(var item in NavItems)
        {
            if (item.SubItems.IsNullOrEmpty())
            {
                <a href="#" class="sidebar-item @(activeItem == item.Title ? "active" : "")" @onclick="() => SetActiveItem(item)">
                    <i class="@item.Icon sidebar-item-icon"></i>
                    <span class="sidebar-item-text">@item.Title</span>
                </a>
            }
            else
            {
                <a href="#" class="sidebar-item d-flex justify-content-between" @onclick="() => ToggleSubMenu(item.Title)">
                    <div class="info">
                        <i class="@item.Icon sidebar-item-icon"></i>
                        <span class="sidebar-item-text">@item.Title</span>
                    </div>
                    <div class="enabledrop">
                        <i class="@(subMenuVisibility.ContainsKey(item.Title) && subMenuVisibility[item.Title] ? "bi bi-caret" : "bi bi-caret-down")"></i>
                    </div>
                </a>
                <div class="collapse sidebar-item-children @(subMenuVisibility.ContainsKey(item.Title) && subMenuVisibility[item.Title] ? "show" : "")">
                    @foreach(var subItem in item.SubItems)
                    {
                        <a href="#" class="sidebar-item @(activeItem == subItem.Title ? "active" : "")" @onclick="() => SetActiveItem(subItem)">
                            <i class="@subItem.Icon sidebar-item-icon"></i>
                            <span class="sidebar-item-text">@subItem.Title</span>
                        </a>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private bool isSidebarCollapsed { get; set; } = false;
    private string activeItem { get; set; } = string.Empty;
    private Dictionary<string, bool> subMenuVisibility { get; set; } = new Dictionary<string, bool>();

    public List<SidebarItemModel> NavItems = new List<SidebarItemModel>
    {
        new SidebarItemModel
        {
            Icon = "bi bi-house-door",
            Route = "/",
            Title = "Home"
        },
        new SidebarItemModel
        {
            Icon = "bi bi-caret-down-fill",
            Route = "/test",
            Title = "Actors",
            SubItems = new List<SidebarItemModel>
            {
                new SidebarItemModel
                {
                    Icon = "bi bi-shield-lock",
                    Route = "/actor/detail",
                    Title = "Actor Detail"
                },
                new SidebarItemModel
                {
                    Icon = "bi bi-gear",
                    Route = "/actor/index",
                    Title = "Actors"
                }
            }
        },
    };

    private async Task ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleSubMenu(string title)
    {
        if (subMenuVisibility.ContainsKey(title))
        {
            subMenuVisibility[title] = !subMenuVisibility[title];
        }
        else
        {
            subMenuVisibility[title] = true;
        }
    }

    private void SetActiveItem(SidebarItemModel item)
    {
        activeItem = item.Title;
        StateHasChanged();
    }
}
