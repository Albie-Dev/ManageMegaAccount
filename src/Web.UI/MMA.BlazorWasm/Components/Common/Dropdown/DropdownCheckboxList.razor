<div class="dropdown-center @(Class)">
    <button class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"  type="button" id="dropdownMenuButton"
        <i class="bi bi-columns"></i> @Title
    </button>
    <ul class="dropdown-menu mt-1 overflow-auto @(DropdownClass)" style="max-height: 500px; min-width: 250px;"
        aria-labelledby="dropdownMenuButton">
        <li class="px-3 py-1">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search..." @bind="searchTerm"
                    @oninput="OnSearchInput">
                <span class="input-group-text bg-transparent border-start-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
            </div>
        </li>

        <li>
            <button class="dropdown-item btn" @onclick="ToggleSelectAll">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="selectAll" />
                    <label class="form-check-label">Choose All</label>
                </div>
            </button>
        </li>

        <li>
            <hr class="dropdown-divider">
        </li>

        <li class="px-3 py-1" style="max-height: 200px; overflow-y: auto;">
            @foreach (var item in FilteredItems)
            {
                <button class="dropdown-item btn" @onclick="() => ToggleItemSelection(item)">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="item.IsSelected" />
                        <label class="form-check-label">@item.Name</label>
                    </div>
                </button>
            }
        </li>

        <li class="px-3 py-1">
            <hr />
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary btn-sm" @onclick="ResetSelection">Reset</button>
                <div class="action">
                    <button class="btn btn-outline-secondary btn-sm" @onclick="CancelSelection">Cancel</button>
                    <button class="btn btn-primary btn-sm" @onclick="ApplySelection">Apply</button>
                </div>
            </div>
        </li>
    </ul>
</div>

@code {
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = "Choose Options";
    [Parameter] public List<DropdownItemModel> Items { get; set; } = new List<DropdownItemModel>();
    [Parameter] public EventCallback<List<DropdownItemModel>> OnApply { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool selectAll = false;
    private bool isOpen = false;
    private string searchTerm = string.Empty;

    private List<DropdownItemModel> FilteredItems => Items
        .Where(item => item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private string DropdownClass => isOpen ? "dropdown-menu show" : "dropdown-menu";

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        selectAll = !selectAll;
        foreach (var item in Items)
        {
            item.IsSelected = selectAll;
        }
    }

    private void ToggleItemSelection(DropdownItemModel item)
    {
        item.IsSelected = !item.IsSelected;
        selectAll = Items.All(i => i.IsSelected);
    }

    private void ResetSelection()
    {
        foreach (var item in Items)
        {
            item.IsSelected = false;
        }
        selectAll = false;
    }

    private void CancelSelection()
    {
        isOpen = false;
        OnCancel.InvokeAsync();
    }

    private void ApplySelection()
    {
        isOpen = false;
        OnApply.InvokeAsync(Items.Where(item => item.IsSelected).ToList());
    }
}
