@typeparam TData
@typeparam TFilter where TFilter : new()
@typeparam TSelection


<div class="container my-4">
    <div class="d-flex justify-content-between mb-3">
        <div class="d-flex justify-content-start">
            @ActionContent
        </div>

        <div class="d-flex flex-row-reverse">
            <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2" OnClick="ToggleFilterPanel"
                Icon="bi bi-funnel" IconPosition="CIconPositionType.Center" />
            <DropdownCheckboxList Items="Columns" OnApply="ApplyColumnSelection" OnCancel="CancelColumnSelection"
                Class="mx-2" Title=""/>
            <input class="form-control w-auto" type="text" placeholder="Search..." @oninput="OnSearchInputChange"
                @onkeydown="Search" />
        </div>
    </div>

    @if (_showFilterPanel)
    {
        <Filter FilterLabelName="Test" @bind-FilterProperty="FilterProperty"
            OnApplyFilter="HandleFilterApplied"
            IsOpen="@_showFilterPanel" IsOpenChanged="(open) => _showFilterPanel = open">
            <CustomFilterContent>
                @FilterContent
            </CustomFilterContent>    
        </Filter>
    }

    <table class="table table-bordered table-hover">
        <thead>
            <tr class="table-primary">
                @foreach (var column in Columns.Where(c => c.IsSelected))
                {
                    <th>
                        <div class="d-flex">
                            @if (column.IsSort)
                            {
                                <span style="cursor: pointer;" @onclick="EventCallback.Factory.Create(this, 
                                    () => SortAsync(propertyName: column.Value.ToString() ?? string.Empty))">@column.Name</span>
                                @if (_requestData.Sorter != null && _requestData.Sorter.KeyName == column.Value.ToString())
                                {
                                    if (_requestData.Sorter.IsASC)
                                    {
                                        <i class="bi bi-sort-alpha-down ms-1 text-danger"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort-alpha-up-alt ms-1 text-success"></i>
                                    }
                                }
                            }
                            else
                            {
                                <span>@column.Name</span>
                            }
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (!_filteredData.IsNullOrEmpty())
            {
                @foreach (TData row in _filteredData ?? new List<TData>())
                {
                    <tr>
                        @foreach (var column in Columns.Where(c => c.IsSelected))
                        {
                            if (column.Name == "#" && MapSelection != null)
                            {
                                var selectionItem = MapSelection.Invoke(row);
                                var isChecked = SelectedItems.Contains(selectionItem);
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@isChecked"
                                            id="flexCheckDefault"
                                            @onchange="() => OnToggleSelectedItem(row: row)">
                                    </div>
                                </td>
                            }
                            else
                            {
                                if (!CellContents.IsNullOrEmpty() && CellContents.TryGetValue(column.Value.ToString() ?? string.Empty,
                                    out RenderFragment<TData>? template))
                                {
                                    <td>@template.Invoke(row)</td>
                                }
                                else
                                {
                                    <td>@row?.GetType().GetProperty(column.Value.ToString() ?? string.Empty)?.GetValue(row, null)</td>
                                }
                            }
                        }
                    </tr>
                }
            }
            else
            {
                <tr class="text-secondary text-center">
                    <td colspan="@Columns.Where(c => c.IsSelected).Count()">No items available to show.</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-end mt-3">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1" OnClick="FirstPage"
            IsDisabled="@(!CanNavigateFirst)" Icon="bi bi-chevron-double-left"
            IconPosition="CIconPositionType.Center" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1" OnClick="PreviousPage"
            IsDisabled="@(!CanNavigatePrevious)" Icon="bi bi-chevron-left" IconPosition="CIconPositionType.Center" />

        <div class="d-flex align-items-center">
            @foreach (var page in GetPagingNumbers())
            {
                string className = "btn btn-sm btn" + (_currentPage == page ? string.Empty : "-outline") + "-primary me-1";
                <ButtonAmam7078 Class="@className" Text="@(page.ToString())"
                    OnClick="EventCallback.Factory.Create(this, () => GoToPage(page))"
                    IsDisabled="@(_currentPage == page)" />
            }
        </div>
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1" OnClick="NextPage"
            IsDisabled="@(!CanNavigateNext)" Icon="bi bi-chevron-right" IconPosition="CIconPositionType.Center" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1" OnClick="LastPage"
            IsDisabled="@(!CanNavigateLast)" Icon="bi bi-chevron-double-right"
            IconPosition="CIconPositionType.Center" />
    </div>
</div>