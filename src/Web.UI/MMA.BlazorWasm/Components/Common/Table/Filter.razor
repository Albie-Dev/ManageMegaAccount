@typeparam TFilter where TFilter : new()

<div class="filter-table position-fixed top-0 p-2 end-0 border bg-light shadow-lg rounded"
    style="width: 450px; height: 100vh; overflow-y: auto; display: flex; flex-direction: column;">
    <div class="d-flex justify-content-between align-items-center">
        <h3 class="panel-title">@FilterLabelName</h3>
        <ButtonAmam7078 Class="btn-close" OnClick="CloseFilterPanel"></ButtonAmam7078>
    </div>
    <hr class="my-2">
    <div class="Filter-Content flex-grow-1">
        @foreach (PropertyInfo property in typeof(TFilter).GetProperties() ?? new PropertyInfo[0])
        {
            var propertyType = property.PropertyType;

            if (Nullable.GetUnderlyingType(propertyType) == typeof(DateTimeOffset) || propertyType == typeof(DateTimeOffset))
            {
                <div class="mb-3">
                    <label>@I18NHelper.GetString($"Filter_{typeof(TFilter).Name}_{property.Name}_Entry")</label>
                    <input class="form-control" type="date"
                        value="@((property.GetValue(FilterProperty) as DateTimeOffset?)?.ToString("yyyy-MM-dd") ?? string.Empty)"
                         @oninput="(e) => SetPropertyValue(property, DateTimeOffset.TryParse(e.Value?.ToString(), out var dateValue) ? dateValue : (DateTimeOffset?)null)" />
                </div>
            }
            else if (propertyType.IsEnum || Nullable.GetUnderlyingType(propertyType)?.IsEnum == true)
            {
                var enumValues = Enum.GetValues(propertyType).Cast<Enum>();

                // Tạo danh sách DropdownItemModel từ Enum
                var dropdownItems = enumValues.Select(enumValue => new DropdownItemModel
                {
                    Name = enumValue.ToString(),
                    Value = enumValue,
                    IsSelected = enumValue.Equals(property.GetValue(FilterProperty))
                }).ToList();

                <div class="mb-3">
                    <label>@I18NHelper.GetString($"Filter_{typeof(TFilter).Name}_{property.Name}_Entry")</label>
                    <select class="form-control"
                        @onchange="(e) => SetPropertyValue(property, Enum.TryParse(propertyType, e.Value?.ToString() ?? string.Empty, out var enumValue) ? enumValue : null)">
                        @foreach (var item in dropdownItems)
                        {
                            <option value="@item.Value">@item.Name</option>
                        }
                    </select>
                </div>
            }
            else if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(List<>) &&
            propertyType.GetGenericArguments()[0].IsEnum)
            {
                var enumType = propertyType.GetGenericArguments()[0];
                var enumValues = Enum.GetValues(enumType).Cast<Enum>();

                var currentEnumValues = property.GetValue(FilterProperty) as List<Enum>;

                <div class="mb-3">
                    <label>@I18NHelper.GetString($"Filter_{typeof(TFilter).Name}_{property.Name}_Entry")</label>
                    @foreach (var enumValue in enumValues)
                    {
                        var isChecked = currentEnumValues?.Contains(enumValue) ?? false;
                        <div>
                            <input type="checkbox" checked="@isChecked" @onchange="(e) => ToggleEnumValue(property, enumValue, e.Value)" />
                            <label>@enumValue.ToString()</label>
                        </div>
                    }
                </div>
            }
            else if (propertyType == typeof(string))
            {
                <div class="mb-3">
                    <label>@I18NHelper.GetString($"Filter_{typeof(TFilter).Name}_{property.Name}_Entry")</label>
                    <input class="form-control" type="text" value="@property.GetValue(FilterProperty)?.ToString()"
                        @oninput="(e) => SetPropertyValue(property, e.Value?.ToString())" />
                </div>
            }
            // Add other filter types if needed
        }
    </div>
    <hr>
    <div class="d-flex justify-content-end mt-auto">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2" OnClick="CloseFilterPanel" Text="Cancel" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-primary" OnClick="ApplyFilter" Text="Apply Filter" />
    </div>
</div>

@code {
    #region Parameter
    [Parameter]
    public string FilterLabelName { get; set; } = string.Empty;
    [Parameter]
    public TFilter FilterProperty { get; set; } = new TFilter();

    [Parameter]
    public EventCallback<bool> ShowPanelFilterChanged { get; set; }
    [Parameter]
    public EventCallback<TFilter> ApplyFilterChanged { get; set; }

    #endregion Parameter

    #region property
    #endregion property

    #region callback
    private async Task CloseFilterPanel()
    {
        await ShowPanelFilterChanged.InvokeAsync(false);
        StateHasChanged();
    }

    private async Task ApplyFilter()
    {
        await ApplyFilterChanged.InvokeAsync(FilterProperty);
        StateHasChanged();
    }
    #endregion callback

    #region 

    private void SetPropertyValue(PropertyInfo property, object? value)
    {
        if (FilterProperty != null)
        {
            try
            {
                var targetType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
                if (value == null && property.PropertyType.IsValueType && Nullable.GetUnderlyingType(property.PropertyType) == null)
                {
                    return;
                }
                property.SetValue(FilterProperty, Convert.ChangeType(value, targetType));
            }
            catch (Exception ex)
            {
                _toastService.ShowError($"Error setting property value: {ex.Message}");
            }
        }
    }

    private void ToggleEnumValue(PropertyInfo property, Enum enumValue, object? isChecked)
    {
        // Lấy kiểu dữ liệu của TEnum từ PropertyInfo
        var enumType = property.PropertyType.GetGenericArguments()[0];

        // Lấy danh sách hiện tại từ property
        var currentEnumValues = property.GetValue(FilterProperty) as dynamic;

        // Nếu danh sách chưa được khởi tạo, tạo mới danh sách
        if (currentEnumValues == null)
        {
            // Tạo một instance của List<TEnum> bằng reflection
            var listType = typeof(List<>).MakeGenericType(enumType);
            currentEnumValues = Activator.CreateInstance(listType);
            property.SetValue(FilterProperty, currentEnumValues);
        }

        // Chuyển đổi enumValue sang kiểu TEnum
        var specificEnumValue = Convert.ChangeType(enumValue, enumType);

        if (isChecked != null && (bool)isChecked)
        {
            // Kiểm tra null trước khi ép kiểu và sử dụng Contains
            if (currentEnumValues != null)
            {
                var list = (IEnumerable<object>)currentEnumValues ?? new List<object>();
                if (list != null && !list.Contains(specificEnumValue))
                {
                    if (currentEnumValues != null)
                    {
                        currentEnumValues.Add(specificEnumValue);
                    }
                }
                
            }
        }
        else
        {
            // Xóa giá trị enum khỏi danh sách
            currentEnumValues?.Remove(specificEnumValue);
        }
    }

    #endregion
}
