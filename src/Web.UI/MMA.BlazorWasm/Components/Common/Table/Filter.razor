@typeparam TFilter where TFilter : new()

<div class="filter-table position-fixed top-0 p-2 end-0 border bg-light shadow-lg rounded"
    style="width: 450px; height: 100vh; overflow-y: auto; display: flex; flex-direction: column;">
    <div class="d-flex justify-content-between align-items-center">
        <h3 class="panel-title">@FilterLabelName</h3>
        <ButtonAmam7078 Class="btn-close" OnClick="CloseFilterPanel"></ButtonAmam7078>
    </div>
    <hr class="my-2">
    <div class="Filter-Content flex-grow-1">
        @if (CustomFilterContent != null)
        {
            @CustomFilterContent
        }
    </div>
    <hr>
    <div class="d-flex justify-content-end mt-auto">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2" OnClick="CloseFilterPanel" Text="Cancel" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-primary" OnClick="ApplyFilter" Text="Apply Filter" />
    </div>
</div>

@code {
    #region Parameter
    [Parameter]
    public string FilterLabelName { get; set; } = string.Empty;
    [Parameter]
    public TFilter FilterProperty { get; set; } = new TFilter();
    [Parameter]
    public EventCallback<TFilter> FilterPropertyChanged { get; set; }

    [Parameter]
    public EventCallback OnApplyFilter { get; set; }

    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public RenderFragment? CustomFilterContent { get; set; }

    #endregion Parameter

    #region callback
    private async Task CloseFilterPanel()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        StateHasChanged();
    }

    private async Task ApplyFilter()
    {
        await FilterPropertyChanged.InvokeAsync(FilterProperty);
        await OnApplyFilter.InvokeAsync();
        StateHasChanged();
    }
    #endregion callback
}
