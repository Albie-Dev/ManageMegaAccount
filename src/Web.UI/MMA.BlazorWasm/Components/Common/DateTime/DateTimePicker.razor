@switch(Type)
{
    case CDateTimePickerType.DateTime:
    {
        <div class="form-group date-time-range">
            <label class="form-label">@LabelName</label>
            <div class="input-group">
                <input type="text" class="form-control" id="dateTimeRange">
                <button class="btn btn-outline-danger" type="button" @onclick="ClearDateTime">
                    <i class="bi bi-x text-danger"></i>
                </button>
            </div>
        </div>
        break;
    }

    case CDateTimePickerType.DateOnly:
    {
        <div class="form-group date-time-range">
            <label class="form-label">@LabelName</label>
            <div class="input-group">
                <input type="text" class="form-control" id="dateRange">
                <button class="btn btn-outline-danger" type="button" @onclick="ClearDate">
                    <i class="bi bi-x text-danger"></i>
                </button>
            </div>
        </div>
        break;
    }

    case CDateTimePickerType.TimeOnly:
    {
        <div class="form-group date-time-range">
            <label class="form-label">@LabelName</label>
            <div class="input-group">
                <input type="text" class="form-control" id="timeRange">
                <button class="btn btn-outline-danger" type="button" @onclick="ClearTime">
                    <i class="bi bi-x text-danger"></i>
                </button>
            </div>
        </div>
        break;
    }

    default: break;
}

@code
{
    [Parameter] public string LabelName { get; set; } = string.Empty;
    [Parameter] public CDateTimePickerType Type { get; set; }
    [Parameter] public DateTimePickerModelData ModelData { get; set; } = new();
    [Parameter] public EventCallback<DateTimePickerModelData> OnChange { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("initDateTimePicker", Type.ToString(), DotNetObjectReference.Create(this));
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task UpdateDate(string start, string end)
    {
        ModelData.StartDate = DateOnly.Parse(start);
        ModelData.EndDate = DateOnly.Parse(end);
        await OnChange.InvokeAsync(ModelData);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task UpdateTime(string start, string end)
    {
        ModelData.StartTime = TimeOnly.ParseExact(start, "HH:mm");
        ModelData.EndTime = TimeOnly.ParseExact(end, "HH:mm");
        await OnChange.InvokeAsync(ModelData);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task UpdateDateTime(string start, string end)
    {
        ModelData.StartDateTime = DateTimeOffset.Parse(start);
        ModelData.EndDateTime = DateTimeOffset.Parse(end);
        await OnChange.InvokeAsync(ModelData);
        StateHasChanged();
    }

    private async Task ClearDate()
    {
        ModelData.StartDate = null;
        ModelData.EndDate = null;
        await OnChange.InvokeAsync(ModelData);
        await _jsRuntime.InvokeVoidAsync("clearDatePicker");
        StateHasChanged();
    }

    private async Task ClearTime()
    {
        ModelData.StartTime = null;
        ModelData.EndTime = null;
        await OnChange.InvokeAsync(ModelData);
        await _jsRuntime.InvokeVoidAsync("clearTimePicker");
        StateHasChanged();
    }

    private async Task ClearDateTime()
    {
        ModelData.StartDateTime = null;
        ModelData.EndDateTime = null;
        await OnChange.InvokeAsync(ModelData);
        await _jsRuntime.InvokeVoidAsync("clearDateTimePicker");
        StateHasChanged();
    }
}
