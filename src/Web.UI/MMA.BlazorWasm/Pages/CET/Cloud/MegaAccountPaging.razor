@* @page "/mega-accounts"
@using Microsoft.AspNetCore.Components.Rendering

<h3>Mega Accounts</h3>
<ErrorElement Errors="Errors" FormSummaryId="IdLoginFormError" />

<div class="input-group mb-3">
    <input type="text" class="form-control" @bind="searchQuery" placeholder="Search..." />
    <button class="btn btn-primary" @onclick="Search">Search</button>
</div>

<table class="table table-striped table-hover">
    <thead class="thead-dark">
        <tr>
            @foreach (var header in GetTableHeaders())
            {
                <th @onclick="() => Sort(header.Column)">
                    @header.Label
                    <SortIndicator IsSorted="sortColumn == header.Column" IsAscending="sortAscending" />
                </th>
            }
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in pagedResult.Items)
        {
            <tr>
                <td>@account.AccountName</td>
                <td>@account.LastLogin.ToString("yyyy-MM-dd")</td>
                <td>@account.ExpiredDate.ToString("yyyy-MM-dd")</td>
                <td><UserProfile UserInfo="@account.CreatedUserInfo" /></td>
                <td><UserProfile UserInfo="@account.ModifiedUserInfo" /></td>
                <td><a href="#" class="btn btn-sm btn-outline-info" @onclick="() => HandleLoginAsync(account.AccountName)">Login</a></td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(pagedResult.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="#" @onclick="PreviousPage">Previous</a>
        </li>
        @for (int i = 1; i <= pagedResult.TotalPages; i++)
        {
            <li class="page-item @(pagedResult.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="#" @onclick="() => GoToPage(i)">@i</a>
            </li>
        }
        <li class="page-item @(pagedResult.CurrentPage == pagedResult.TotalPages ? "disabled" : "")">
            <a class="page-link" href="#" @onclick="NextPage">Next</a>
        </li>
    </ul>
</nav>

@if (IsLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private BasePagedResult<MegaAccountDetailDto> pagedResult = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchQuery = string.Empty;
    private string sortColumn = nameof(MegaAccountDetailDto.AccountName);
    private bool sortAscending = true;
    private List<ErrorDetailDto> Errors { get; set; } = new();
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        var response = await _httpClientHelper.PostAsync<TableParam<MegaAccountFilterProperty>, BasePagedResult<MegaAccountDetailDto>>(
            endpoint: Path.Combine(EndpointConstant.CET_Base_Url, EndpointConstant.CET_Mega_Account_Paging),
            data: new TableParam<MegaAccountFilterProperty>()
            {
                Filter = null,
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchQuery = searchQuery,
                Sorter = new SorterParam()
                {
                    IsASC = sortAscending,
                    KeyName = sortColumn
                }
            });

        IsLoading = false;
        if (response == null)
        {
            _toastService.ShowError("Đã có lỗi xảy ra trong quá trình kết nối đến Server.");
        }
        else if (!response.Success)
        {
            Errors = response.Errors;
        }
        else
        {
            pagedResult = response.Data ?? new();
        }
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task Sort(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        await LoadData();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < pagedResult.TotalPages)
        {
            currentPage++;
            await LoadData();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadData();
    }

    private async Task HandleLoginAsync(string accountName)
    {
        await Task.CompletedTask;
    }

    // Method to return table headers for sorting
    private List<TableHeader> GetTableHeaders() => new List<TableHeader>
    {
        new TableHeader { Column = nameof(MegaAccountDetailDto.AccountName), Label = "Account Name" },
        new TableHeader { Column = nameof(MegaAccountDetailDto.LastLogin), Label = "Last Login" },
        new TableHeader { Column = nameof(MegaAccountDetailDto.ExpiredDate), Label = "Expired Date" },
        new TableHeader { Column = nameof(MegaAccountDetailDto.CreatedUserInfo.FullName), Label = "Created By" },
        new TableHeader { Column = nameof(MegaAccountDetailDto.ModifiedUserInfo.FullName), Label = "Modified By" }
    };

    // Model for table headers
    private class TableHeader
    {
        public string Column { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
    }
}

@code {
    // Sort indicator component
    public partial class SortIndicator : ComponentBase
    {
        [Parameter] public bool IsSorted { get; set; }
        [Parameter] public bool IsAscending { get; set; }
        
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "span");
            if (IsSorted)
            {
                builder.AddContent(1, IsAscending ? "↑" : "↓");
            }
            else
            {
                builder.AddContent(2, "↕");
            }
            builder.CloseElement();
        }
    }
} *@
