@page "/movie/actor"

<PageTitle>Diễn viên</PageTitle>

@if (_isLoading)
{
    <LoadingElement />
}

@if (_notificationResponse != null)
{
    <DisplayMessageElement Notification="_notificationResponse" />
    _notificationResponse = null;
}
<div class="d-flex justify-content-between">
    <div class="div">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-primary" Icon="bi bi-cloud-plus"
            IconPosition="CIconPositionType.Right" Text="Create" OnClick="CreateActorAsync" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-success" Icon="bi bi-pencil-square"
            IconPosition="CIconPositionType.Right" Text="Update" IsDisabled="!ShowUpdateActor" OnClick="UpdateActorAsync" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary" Icon="bi-toggle-off"
            IconPosition="CIconPositionType.Right" Text="Deactive" IsDisabled="ShowDeactiveActor" OnClick="DeactiveActorsAsync" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-info" Icon="bi bi-cloud-upload"
            IconPosition="CIconPositionType.Right" Text="Import" OnClick="HandleOpenUploadModal" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-success" Icon="bi bi-file-earmark-excel"
            IconPosition="CIconPositionType.Right" Text="Export" OnClick="ExportActorsAsync" />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-danger" Icon="bi bi-trash"
            IconPosition="CIconPositionType.Right" Text="Delete" IsDisabled="!ShowUpdateActor" OnClick="DeleteActorsAsync" />
    </div>
    
    <div class="d-flex flex-row-reverse">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2" OnClick="ShowFilterPanel"
            Icon="bi bi-funnel" IconPosition="CIconPositionType.Center" />
        <DropdownCheckboxList Items="_displayColumns" OnApply="ApplyColumnSelection" OnCancel="CancelColumnSelection"
            Class="mx-2" Title=""/>
        @* <input class="form-control w-auto" type="text" placeholder="Search..." @oninput="OnSearchInputChange"
            @onkeydown="Search" /> *@
    </div>
</div>
<ImageViewer ImageUrl="@currentImageUrl" IsOpen="@_isShowImage" IsOpenChanged="(open) => _isShowImage = open" />
@if(_isShowFilterPanel)
{
    <Filter TFilter="ActorFilterProperty" IsOpen="@_isShowFilterPanel" IsOpenChanged="(open) => _isShowFilterPanel = open"
        FilterLabelName="Lọc diễn viên">
        <CustomFilterContent>
            <label for="Hips">Loại kích cỡ ngực :</label>
            <ComboboxList T="@(CCupSizeType)" Items="CCupSizeType.A.ToComboboxModels()"
                Mode="CComboboxModeType.Checkbox" @bind-BindValues="FilterProperty.CupSizeTypes"
                PlaceHolderName="Chọn loại kích thước ngực" />
        </CustomFilterContent>
    </Filter>
}

<FileUploader @bind-IsOpen="_isUploadModalOpen"
    Title="Import Actors"
    MaxFileSize="5*1024*1024"
    FileTypes="new List<CFileType>(){ CFileType.Excel }"
    OnFileUploaded="ImportActorsAsync"
    OnDownloadTemplateFile="DownloadTemplateFileAsync"
/>

<div class="table mt-2">
    <table class="table table-striped table-bordered align-middle">
        <thead>
            <tr>
                <th>#</th>
                @foreach(var col in _displayColumns.Where(c => c.IsSelected))
                {
                    <th>
                        <div class="d-flex">
                            @if (col.IsSort)
                            {
                                <span style="cursor: pointer;" @onclick="EventCallback.Factory.Create(this, () => SortAsync(propertyName: col.Value.ToString() ?? string.Empty))">@col.Name</span>
                                @if (_requestDto.Sorter != null && _requestDto.Sorter.KeyName == col.Value.ToString())
                                {
                                    if (_requestDto.Sorter.IsASC)
                                    {
                                        <i class="bi bi-sort-alpha-down"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort-alpha-up-alt"></i>
                                    }
                                }
                            }
                            else
                            {
                                <span>@col.Name</span>
                            }
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody id="sortableTable">
            @if (!_result.Items.IsNullOrEmpty())
            {
                foreach(var item in _result.Items)
                {
                    <tr>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@item.ActorId"
                                    id="flexCheckDefault"
                                    @onchange="() => SetSelectedActorId(actorId: item.ActorId)">
                            </div>
                        </td>
                        @foreach (var col in _displayColumns.Where(c => c.IsSelected))
                        {
                            string styleName =  string.Empty;
                            string className = string.Empty;
                            @if (col.Value.ToString() == nameof(ActorDetailDto.Avatar))
                            {
                                styleName = "width: 100px; height: 100px; overflow: hidden;";
                                className = "rounded";
                            }
                            <td class="@($"{className} cell-limit align-middlere")" style="@($"{styleName}")">
                                @switch (col.Value)
                                {
                                    case nameof(ActorDetailDto.Name):
                                        @item.Name
                                        break;
                                    case nameof(ActorDetailDto.DateOfBirth):
                                        @item.DateOfBirth.ToString("yyyy-MM-dd")
                                        break;
                                    case nameof(ActorDetailDto.DebutDate):
                                        @item.DebutDate.ToString("yyyy-MM-dd")
                                        break;
                                    case nameof(ActorDetailDto.Avatar):
                                        <img src="@item.Avatar"
                                            alt="Avatar"
                                            class="img-fluid rounded"
                                            style="width: 100%; height: 100%; object-fit:cover; cursor: pointer;"
                                            @onclick="() => OpenImageViewer(item.Avatar)"
                                        />
                                        break;
                                    case nameof(ActorDetailDto.Height):
                                        @item.Height
                                        break;
                                    case nameof(ActorDetailDto.Waist):
                                        @item.Waist
                                        break;
                                    case nameof(ActorDetailDto.Bust):
                                        @item.Bust
                                        break;
                                    case nameof(ActorDetailDto.Hips):
                                        @item.Hips
                                        break;
                                    case nameof(ActorDetailDto.CupSizeType):
                                        @item.CupSizeType
                                        break;
                                    case nameof(ActorDetailDto.RegionType):
                                        <RegionElement RegionType="@item.RegionType" />
                                        break;
                                    case nameof(ActorDetailDto.Status):
                                        <MasterStatusElement Status="@item.Status" />
                                        break;
                                    default:
                                        <span>--</span>
                                        break;
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr class="text-secondary">
                    <td colspan="@InitDisplayColumns().Count">No items available to show.</td>
                </tr>
            }
        </tbody>
    </table>
</div>
