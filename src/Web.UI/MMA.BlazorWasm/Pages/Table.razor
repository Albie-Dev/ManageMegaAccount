@typeparam TData
@typeparam TFilter

<div class="container my-4">
    <div class="d-flex justify-content-between mb-3">
        <div class="d-flex justify-content-start">
            <ButtonAmam7078 Class="btn btn-sm btn-outline-primary me-2" Icon="bi bi-cloud-plus"
                IconPosition="@CIconPositionType.Left" IsDisabled="true" Text="Create" />
            <ButtonAmam7078 Class="btn btn-sm btn-outline-success" Icon="bi bi-pencil-square"
                IconPosition="@CIconPositionType.Left" Text="Edit" />
        </div>

        <div class="d-flex flex-row-reverse">
            <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2"
                OnClick="ToggleFilterPanel"
                Icon="bi bi-funnel"
                IconPosition="CIconPositionType.Center"
                Text="Cancel"
            />
            <DropdownCheckboxList Title="Columns" Items="_columns" OnApply="ApplyColumnSelection"
                OnCancel="CancelColumnSelection" Class="mx-2" />
            <input class="form-control w-auto" type="text" placeholder="Search..." @oninput="OnSearchInputChange"
                @onkeydown="Search" />
        </div>
    </div>

    @if (_showFilterPanel)
    {
        <div class="position-fixed top-0 p-2 end-0 border bg-light shadow-lg rounded"
            style="width: 450px; height: 100vh; overflow-y: auto; display: flex; flex-direction: column;">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="panel-title">Filter Panel</h3>
                <button class="btn-close" @onclick="CloseFilterPanel"></button>
            </div>
            <hr class="my-2">
            <div class="Filter-Content flex-grow-1">
                @if (_requestData.Filter != null)
                {
                    foreach (PropertyInfo property in _requestData.Filter.GetType().GetProperties())
                    {
                        if (property.PropertyType == typeof(string))
                        {
                            <div class="mb-3">
                                <label>@property.Name</label>
                                <input class="form-control" type="text" value="@property.GetValue(_requestData.Filter)" 
                                    @oninput="(e) => SetPropertyValue(property, e.Value)" />
                            </div>
                        }
                        else if (property.PropertyType == typeof(DateTimeOffset))
                        {
                            <div class="mb-3">
                                <label>@property.Name</label>
                                <input class="form-control" type="date" value="@((property.GetValue(_requestData.Filter) as DateTimeOffset?)?.ToString("yyyy-MM-dd") ?? "")" 
                                    @oninput="(e) => SetPropertyValue(property, e.Value)" />
                            </div>
                        }
                        else if (property.PropertyType.IsEnum)
                        {
                            var enumValues = Enum.GetValues(property.PropertyType).Cast<Enum>();
                            <div class="mb-3">
                                <label>@property.Name</label>
                                <select class="form-control" @onchange="(e) => SetPropertyValue(property, e.Value)">
                                    @foreach (var enumValue in enumValues)
                                    {
                                        <option value="@enumValue">@enumValue</option>
                                    }
                                </select>
                            </div>
                        }
                        // Add other filter types if needed
                    }
                }
            </div>
            <hr>
            <div class="d-flex justify-content-end mt-auto">
                <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2"
                    OnClick="CloseFilterPanel"
                    Text="Cancel"
                />
                <ButtonAmam7078 Class="btn btn-sm btn-outline-primary"
                    OnClick="ApplyFilter"
                    Text="Apply Filter"
                />
            </div>
        </div>
    }

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @foreach (var column in _columns.Where(c => c.IsSelected))
                {
                    <th>@column.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (TData row in _filteredData ?? new List<TData>())
            {
                <tr>
                    @foreach (var column in _columns.Where(c => c.IsSelected))
                    {
                        <td>@row?.GetType().GetProperty(column.Name)?.GetValue(row, null)</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-end mt-3">
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1"
            OnClick="FirstPage"
            IsDisabled="@(!CanNavigateFirst)"
            Icon="bi bi-chevron-double-left"
            IconPosition="CIconPositionType.Center"
            />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1"
            OnClick="PreviousPage"
            IsDisabled="@(!CanNavigatePrevious)"
            Icon="bi bi-chevron-left"
            IconPosition="CIconPositionType.Center"
            />

        <div class="d-flex align-items-center">
            @foreach (var page in GetPagingNumbers())
            {
                string className = "btn btn-sm btn" + (_currentPage == page ? string.Empty : "-outline") + "-primary me-1";
                <ButtonAmam7078 Class="@className"
                    Text="@(page.ToString())"
                    OnClick="EventCallback.Factory.Create(this, () => GoToPage(page))"
                    IsDisabled="@(_currentPage == page)"
                    />
            }
        </div>
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1"
            OnClick="NextPage"
            IsDisabled="@(!CanNavigateNext)"
            Icon="bi bi-chevron-right"
            IconPosition="CIconPositionType.Center"
            />
        <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-1"
            OnClick="LastPage"
            IsDisabled="@(!CanNavigateLast)"
            Icon="bi bi-chevron-double-right"
            IconPosition="CIconPositionType.Center"
            />
    </div>
</div>

@if (_isLoading)
{
    <LoadingElement />
}

@code {
    private bool _isLoading { get; set; } = false;
    private List<TData> _filteredData { get; set; } = new();
    private int _currentPage = 1;
    private int _itemsPerPage = 1;
    private List<DropdownItemModel> _columns { get; set; } = new();

    private int _totalPages { get; set; } = 0;
    private int _totalItems { get; set; } = 0;

    private DateTimePickerModelData NgayTaoData { get; set; } = new();

    [Parameter]
    public string ApiEndpoint { get; set; } = string.Empty;

    [Parameter]
    public CHttpClientType HttpClientType { get; set; }

    [Parameter]
    public CPortalType PortalType { get; set; }

    private TableParam<TFilter> _requestData { get; set; } = new TableParam<TFilter>();

    private bool _showFilterPanel = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchDataAsync();
    }

    private void SetPropertyValue(PropertyInfo property, object? value)
    {
        if (_requestData.Filter != null)
        {
            property.SetValue(_requestData.Filter, Convert.ChangeType(value, property.PropertyType));
        }
    }

    private async Task FetchDataAsync()
    {
        try
        {
            _isLoading = true;

            _requestData.PageNumber = _currentPage;
            _requestData.PageSize = _itemsPerPage;

            var result = await _httpClientHelper.PostAsync<TableParam<TFilter>, BasePagedResult<TData>>(
            ApiEndpoint, _requestData, HttpClientType, PortalType);

            if (result?.Data != null)
            {
                _filteredData.Clear();
                _filteredData = new List<TData>(result.Data.Items);
                _columns = GetColumnsFromData(_filteredData);

                _totalItems = result.Data.TotalItems;
                _totalPages = result.Data.TotalPages;
            }
            else
            {
                _toastService.ShowError("Error fetching data.");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private List<DropdownItemModel> GetColumnsFromData(List<TData> data)
    {
        if (!data.IsNullOrEmpty())
        {
            TData firstItem = data.First();
            return firstItem!.GetType().GetProperties().Select(p => new DropdownItemModel
            {
                Name = p.Name,
                Value = p.Name,
                IsSelected = true
            }).ToList();
        }
        return new();
    }

    private async Task Search(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await FetchDataAsync();
            StateHasChanged();
        }
    }

    private void OnSearchInputChange(ChangeEventArgs e)
    {
        _requestData.SearchQuery = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void ApplyPaging()
    {
        _filteredData = _filteredData.Skip((_currentPage - 1) * _itemsPerPage).Take(_itemsPerPage).ToList();
    }

    private async Task NextPage()
    {
        if (CanNavigateNext)
        {
            _currentPage++;
            _requestData.PageNumber = _currentPage;
            await FetchDataAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (CanNavigatePrevious)
        {
            _currentPage--;
            _requestData.PageNumber = _currentPage;
            await FetchDataAsync();
        }
    }

    private async Task FirstPage()
    {
        if (CanNavigateFirst)
        {
            _currentPage = 1;
            _requestData.PageNumber = _currentPage;
            await FetchDataAsync();
        }
    }

    private async Task LastPage()
    {
        if (CanNavigateLast)
        {
            _currentPage = _totalPages;
            _requestData.PageNumber = _currentPage;
            await FetchDataAsync();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page > 0 && page <= _totalPages)
        {
            _currentPage = page;
            _requestData.PageNumber = _currentPage;
            await FetchDataAsync();
        }
    }

    private bool CanNavigatePrevious => _currentPage > 1;

    private bool CanNavigateNext => _currentPage < _totalPages;

    private bool CanNavigateFirst => _currentPage > 1;

    private bool CanNavigateLast => _currentPage < _totalPages;

    private List<int> GetPagingNumbers()
    {
        var start = Math.Max(1, _currentPage - 2);
        var end = Math.Min(_totalPages, _currentPage + 2);
        var pages = new List<int>();

        for (int i = start; i <= end; i++)
        {
            pages.Add(i);
        }

        return pages;
    }

    private void ToggleFilterPanel()
    {
        _showFilterPanel = !_showFilterPanel;
    }

    private void CloseFilterPanel()
    {
        _showFilterPanel = false;
    }

    private void ApplyFilter()
    {
        ApplyPaging();
    }

    private void ApplyColumnSelection(List<DropdownItemModel> selectedColumns)
    {
        foreach (var column in _columns)
        {
            column.IsSelected = selectedColumns.Any(c => c.Name == column.Name && c.IsSelected);
        }
    }

    private void CancelColumnSelection()
    {
        _showFilterPanel = false;
    }
}