@typeparam TData
@typeparam TFilter

<div class="container my-4">
    <div class="d-flex justify-content-between mb-3">
        <div class="d-flex justify-content-start">
            <ButtonAmam7078 Class="btn btn-sm btn-outline-primary me-2" Icon="bi bi-cloud-plus"
                IconPosition="@CIconPositionType.Left" IsDisabled="true" Text="Create" />
            <ButtonAmam7078 Class="btn btn-sm btn-outline-success" Icon="bi bi-pencil-square"
                IconPosition="@CIconPositionType.Left" Text="Edit" />
        </div>

        <div class="d-flex flex-row-reverse">
            <button class="btn btn-outline-primary" @onclick="ToggleFilterPanel">
                <i class="bi bi-funnel"></i>
            </button>
            <DropdownCheckboxList Title="Columns" Items="columns" OnApply="ApplyColumnSelection"
                OnCancel="CancelColumnSelection" Class="mx-2" />
            <input class="form-control w-auto" type="text" placeholder="Search..." @bind="searchQuery"
                @oninput="Search" />
        </div>
    </div>

    @if (showFilterPanel)
    {
        <div class="position-fixed top-0 p-2 end-0 border bg-light shadow-lg rounded"
            style="width: 450px; height: 100vh; overflow-y: auto; display: flex; flex-direction: column;">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="panel-title">Filter Panel</h3>
                <button class="btn-close" @onclick="CloseFilterPanel"></button>
            </div>
            <hr class="my-2">
            <div class="Filter-Content flex-grow-1">
                <DateTimePicker LabelName="Ngày tạo" ModelData="NgayTaoData" Type="@CDateTimePickerType.DateTime" />
                <!-- Add other filter controls as needed -->
            </div>
            <hr>
            <div class="d-flex justify-content-end mt-auto">
                <button class="btn btn-sm btn-outline-secondary me-2" @onclick="CloseFilterPanel">Cancel</button>
                <button class="btn btn-sm btn-outline-primary" @onclick="ApplyFilter">Apply Filter</button>
            </div>
        </div>
    }

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @foreach (var column in columns.Where(c => c.IsSelected))
                {
                    <th>@column.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in filteredData ?? new List<TData>())
            {
                <tr>
                    @foreach (var column in columns.Where(c => c.IsSelected))
                    {
                        <td>@row.GetType().GetProperty(column.Name)?.GetValue(row, null)</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center mt-3">
        <button class="btn btn-outline-secondary me-3" @onclick="PreviousPage" disabled="@(!CanNavigatePrevious)">
            <i class="bi bi-chevron-left"></i> Previous
        </button>
        <span class="align-self-center">Page @currentPage of @totalPages</span>
        <button class="btn btn-outline-secondary ms-3" @onclick="NextPage" disabled="@(!CanNavigateNext)">
            <i class="bi bi-chevron-right"></i> Next
        </button>
    </div>
</div>

@if (IsLoading)
{
    <LoadingElement />
}

@code {
    private bool IsLoading { get; set; } = false;
    private List<TData> filteredData { get; set; } = new();
    private string searchQuery = string.Empty;
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private List<DropdownItemModel> columns { get; set; } = new();
    private int totalPages => (int)Math.Ceiling((double)(filteredData.Count) / itemsPerPage);

    private DateTimePickerModelData NgayTaoData { get; set; } = new();

    [Parameter]
    public string ApiEndpoint { get; set; } = string.Empty;

    [Parameter]
    public CHttpClientType HttpClientType { get; set; }

    [Parameter]
    public CPortalType PortalType { get; set; }

    private TableParam<TFilter> RequestData { get; set; } = new TableParam<TFilter>();

    private bool showFilterPanel = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            var result = await _httpClientHelper.PostAsync<TableParam<TFilter>, BasePagedResult<TData>>(
                ApiEndpoint, RequestData, HttpClientType, PortalType);

            if (result?.Data != null)
            {
                filteredData = result.Data.Items;
                columns = GetColumnsFromData(filteredData);
            }
            else
            {
                _toastService.ShowError("Error fetching data.");
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private List<DropdownItemModel> GetColumnsFromData(List<TData> data)
    {
        if (data?.Any() == true)
        {
            var firstItem = data.First();
            return firstItem.GetType().GetProperties().Select(p => new DropdownItemModel
            {
                Name = p.Name,
                Value = p.Name,
                IsSelected = true
            }).ToList();
        }
        return new List<DropdownItemModel>();
    }

    private void Search()
    {
        filteredData = filteredData.Where(d => d.GetType().GetProperties()
            .Any(p => p.GetValue(d)?.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true)).ToList();
        ApplyPaging();
    }

    private void ApplyPaging()
    {
        filteredData = filteredData.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }

    private void NextPage()
    {
        if (CanNavigateNext)
        {
            currentPage++;
            ApplyPaging();
        }
    }

    private void PreviousPage()
    {
        if (CanNavigatePrevious)
        {
            currentPage--;
            ApplyPaging();
        }
    }

    private bool CanNavigatePrevious => currentPage > 1;

    private bool CanNavigateNext => currentPage < totalPages;

    private void ToggleFilterPanel()
    {
        showFilterPanel = !showFilterPanel;
    }

    private void CloseFilterPanel()
    {
        showFilterPanel = false;
    }

    private void ApplyFilter()
    {
        ApplyPaging();
    }

    private void ApplyColumnSelection(List<DropdownItemModel> selectedColumns)
    {
        foreach (var column in columns)
        {
            column.IsSelected = selectedColumns.Any(c => c.Name == column.Name && c.IsSelected);
        }
    }

    private void CancelColumnSelection()
    {
        showFilterPanel = false;
    }
}