@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json


@page "/"

<PageTitle>Trang chủ</PageTitle>

<h1>Welcome to User Sign In ASP.NET Core Blazor WebAssembly</h1>
<ButtonAmam7078 Class="btn btn-sm btn-outline-info" Icon="bi bi-person" Id="@Guid.NewGuid().ToString()"
  IconPosition="@CIconPositionType.Left" Text="Button" OnClick="TestAuthAsync" />


<Table TData="RoleDetailResponseDto" TFilter="RoleFilterProperty" TSelection="Guid"
  ApiEndpoint="@Path.Combine(EndpointConstant.CET_Base_Url, EndpointConstant.CET_Role_Paging)"
  HttpClientType="CHttpClientType.Public" PortalType="CPortalType.CET"
  Columns="InitColumns()"
  @bind-FilterProperty="FilterProperty"
  @bind-SelectedItems="RoleIds"
  MapSelection="s => s.RoleId"
  IsEnableSelection="true"
  SearchPlaceHolder="Tìm kiếm vai trò theo tên..."
  >
  <FilterContent>
    <label for="Roles">Chọn quyền: </label>
    <ComboboxList T="@(CRoleType)" Items="CRoleType.None.ToComboboxModels()" Mode="CComboboxModeType.Checkbox"
      @bind-BindValues="FilterProperty.RoleTypes" PlaceHolderName="Chọn quyền" />
    <label for="FromDate">Ngày tạo: </label>
    <InputDate id="FromDate" class="form-control" @bind-Value="FilterProperty.FromDate" />
    <label for="ToDate">Đến ngày:</label>
    <InputDate id="ToDate" class="form-control" @bind-Value="FilterProperty.ToDate" />
  </FilterContent>

  <ActionContent>
    <ButtonAmam7078 Class="btn btn-sm btn-outline-primary me-2" Icon="bi bi-cloud-plus"
        IconPosition="CIconPositionType.Right"
        Text="Create"
    />
    <ButtonAmam7078 Class="btn btn-sm btn-outline-success me-2" Icon="bi bi-pencil-square"
        IconPosition="CIconPositionType.Right"
        Text="Update"
    />
    <ButtonAmam7078 Class="btn btn-sm btn-outline-secondary me-2" Icon="bi-toggle-off"
        IconPosition="CIconPositionType.Right"
        Text="Deactive"
    />
    <ButtonAmam7078 Class="btn btn-sm btn-outline-info me-2" Icon="bi bi-cloud-upload"
        IconPosition="CIconPositionType.Right"
        Text="Import"
    />
    <ButtonAmam7078 Class="btn btn-sm btn-outline-success me-2" Icon="bi bi-file-earmark-excel"
        IconPosition="CIconPositionType.Right"
        Text="Export"
    />
    <ButtonAmam7078 Class="btn btn-sm btn-outline-danger" Icon="bi bi-trash"
        IconPosition="CIconPositionType.Right"
        Text="Delete"
        OnClick="DeleteSelectedRoles" IsDisabled="@(RoleIds.Count == 0)"
    />
  </ActionContent>
</Table>

@if (Roles != null && Roles.Count > 0)
{
    <ul class="nav nav-tabs">
        @for (int i = 0; i < Roles.Count; i++)
        {
            var role = Roles[i];
            var currentIndex = i;
            <li class="nav-item">
                <a class="nav-link @(currentIndex == selectedTabIndex ? "active" : "")"
                   @onclick="() => SelectTab(currentIndex)">
                    <i class="bi bi-person-badge me-1"></i>
                    @role.RoleName
                </a>
            </li>
        }
    </ul>
}
<div class="row">
    <div class="col-6 border-end">
        @if (selectedRole != null)
        {
            <ul class="list-group">
                @foreach (var resource in selectedRole.Resources)
                {
                    var isExpanded = expandedResources.Contains(resource);
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-sm btn-link text-decoration-none"
                                    @onclick="@(() => ToggleExpandResource(resource))">
                                <i class="bi @(isExpanded ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                                <i class="bi bi-folder2-open me-1 text-warning"></i>
                                @resource.ResourceName
                            </button>
                        </div>

                        @if (isExpanded)
                        {
                          <div class="ms-4 d-flex flex-wrap mt-2">
                            @foreach (var perm in resource.PermissionTypes)
                            {
                                <li class="d-flex align-items-center me-3">
                                    <input type="checkbox" class="form-check-input me-2"
                                          @bind="perm.HasPermission" />
                                    <i class="bi bi-shield-check text-primary me-2"></i>
                                    @perm.PermissionName
                                </li>
                            }
                          </div>
                        }
                    </li>
                }
            </ul>
        }
    </div>

    <div class="col">
        <h5 class="mt-2">Selected Role: @selectedRole?.RoleName</h5>
        <p class="text-muted">Pick a resource on the left to manage permissions.</p>
    </div>
</div>


@code {
  private RoleFilterProperty FilterProperty { get; set; } = new RoleFilterProperty();
  private List<Guid> RoleIds { get; set; } = new List<Guid>();
  private List<UserRoleProperty> Roles { get; set; } = new List<UserRoleProperty>();
  private UserRoleProperty? selectedRole;
  HashSet<ResourceProperty> expandedResources = new();
  private int selectedTabIndex = 0;
  private async Task TestAuthAsync()
  {
    _toastService.ShowError("OK");
    var response = await _httpClientHelper.GetAsync<string>(endpoint: "api/v1/cet/auth/protected",
    requestType: CHttpClientType.Private, portalType: CPortalType.CET);
    if (response != null && response.Success)
    {
      Console.WriteLine("");
    }
  }


  protected override async Task OnInitializedAsync()
  {
    var apiResponse = await _httpClientHelper.GetAsync<List<UserRoleProperty>>(
      endpoint: "https://localhost:7201/api/v1/cet/userrole/7604fd9c-2739-4e59-b765-6b225bb7ebf5",
      requestType: CHttpClientType.Private,
      portalType: CPortalType.CET);
    
    if (apiResponse == null)
    {

    }
    else if (apiResponse != null && apiResponse.Data != null)
    {
      Roles = apiResponse.Data;
      if (Roles.Count > 0)
      {
          selectedRole = Roles[0];
      }
    }
  }

  private void SelectTab(int index)
  {
    if (Roles != null && index >= 0 && index < Roles.Count)
    {
        selectedTabIndex = index;
        selectedRole = Roles[index];
    }
  }

  void ToggleExpandResource(ResourceProperty resource)
  {
    if (!expandedResources.Add(resource))
        expandedResources.Remove(resource);
  }
  private async Task DeleteSelectedRoles()
  {
    _toastService.ShowInfo(RoleIds.ToJson());
    await Task.CompletedTask;
  }

  private List<DropdownItemModel> InitColumns()
  {
    return new List<DropdownItemModel>()
    {
      new DropdownItemModel()
      {
        Name = "#",
        Value = "#",
        IsSelected = true,
        IsSort = false
      },
      new DropdownItemModel()
      {
        Name = I18NHelper.GetString(key: $"Column_Title_Role_{nameof(RoleDetailResponseDto.RoleId)}_Entry"),
        Value = nameof(RoleDetailResponseDto.RoleId),
        IsSelected = true,
        IsSort = false
      },
      new DropdownItemModel()
      {
        Name = I18NHelper.GetString(key: $"Column_Title_Role_{nameof(RoleDetailResponseDto.RoleName)}_Entry"),
        Value = nameof(RoleDetailResponseDto.RoleName),
        IsSelected = true,
        IsSort = true
      },
      new DropdownItemModel()
      {
        Name = I18NHelper.GetString(key: $"Column_Title_Role_{nameof(RoleDetailResponseDto.RoleType)}_Entry"),
        Value = nameof(RoleDetailResponseDto.RoleType),
        IsSelected = true,
        IsSort = true
      },
      new DropdownItemModel()
      {
        Name = I18NHelper.GetString(key: $"Column_Title_Role_{nameof(RoleDetailResponseDto.CreatedDate)}_Entry"),
        Value = nameof(RoleDetailResponseDto.CreatedDate),
        IsSelected = true,
        IsSort = true
      },
      new DropdownItemModel()
      {
        Name = I18NHelper.GetString(key: $"Column_Title_Role_{nameof(RoleDetailResponseDto.ModifiedDate)}_Entry"),
        Value = nameof(RoleDetailResponseDto.ModifiedDate),
        IsSelected = true,
        IsSort = true
      }
    };
  }
}
