@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json


@page "/"

<PageTitle>Trang chủ</PageTitle>

@if (Roles != null && Roles.Count > 0)
{
    <ul class="nav nav-tabs">
        @for (int i = 0; i < Roles.Count; i++)
        {
            var role = Roles[i];
            var currentIndex = i;
            <li class="nav-item">
                <a class="nav-link @(currentIndex == selectedTabIndex ? "active" : "")"
                   @onclick="() => SelectTab(currentIndex)">
                    <i class="bi bi-person-badge me-1"></i>
                    @role.RoleName
                </a>
            </li>
        }
    </ul>
}
<div class="row">
    <div class="col-6 border-end">
        @if (selectedRole != null)
        {
            <ul class="list-group">
                @foreach (var resource in selectedRole.Resources)
                {
                    var isExpanded = expandedResources.Contains(resource);
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-sm btn-link text-decoration-none"
                                    @onclick="@(() => ToggleExpandResource(resource))">
                                <i class="bi @(isExpanded ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                                <i class="bi bi-folder2-open me-1 text-warning"></i>
                                @resource.ResourceName
                            </button>
                        </div>

                        @if (isExpanded)
                        {
                          <div class="ms-4 d-flex flex-wrap mt-2">
                            @foreach (var perm in resource.PermissionTypes)
                            {
                                <li class="d-flex align-items-center me-3">
                                  <input type="checkbox"
                                        class="form-check-input me-2"
                                        checked="@perm.HasPermission"
                                        @onchange="(e) => OnPermissionChange(selectedRole, resource, perm, e.Value)" />
                                  <i class="bi bi-shield-check text-primary me-2"></i>
                                  @perm.PermissionName
                                </li>
                            }
                          </div>
                        }
                    </li>
                }
            </ul>
        }
    </div>

    <div class="col">
        <h5 class="mt-2">Selected Role: @selectedRole?.RoleName</h5>
        <p class="text-muted">Pick a resource on the left to manage permissions.</p>
    </div>
</div>

<ButtonAmam7078
  Class="btn btn-sm btn-primary mt-3"
  Icon="bi bi-check"
  IconPosition="CIconPositionType.Right"
  Text="Xác nhận"
  Type="button"
  OnClick="UpdateUserRoleAsync"
  />

<div>
    <button class="btn btn-primary" @onclick="ShowModal">Import</button>
</div>

<FileUploader Title="Import Test"
    IsOpen="IsOpen"
    MaxFileSize="@(50*1024*1024)"
    FileTypes="FileTypes"
    OnFileUploaded="HandleUploadFromModal" />


@if (_notificationResponse != null)
{
  <NotificationElement  Notification="_notificationResponse" />
  _notificationResponse = null;
}

@code {
  private List<UserRoleProperty> Roles { get; set; } = new List<UserRoleProperty>();
  private NotificationResponse? _notificationResponse { get; set; }
  private UserRoleProperty? selectedRole;
  HashSet<ResourceProperty> expandedResources = new();
  private int selectedTabIndex = 0;

  public bool IsOpen { get; set; } = false;

  public List<CFileType> FileTypes = new List<CFileType> { 
    CFileType.Excel,
    CFileType.Audio,
    CFileType.Database,
    CFileType.Image,
    CFileType.TXT,
    CFileType.Other,
    CFileType.Video,
    CFileType.PowerPoint,
    CFileType.Word,
    CFileType.Zip,
    CFileType.PDF,
    CFileType.Html,
    CFileType.MicrosoftDownlod
  };

  private void ShowModal()
  {
    IsOpen = true;
  }

  private async Task HandleUploadFromModal(IBrowserFile file)
  {
      var response = await _httpClientHelper.UploadFileAsync(file, "api/FileUpload/upload");
      if (response.IsSuccessStatusCode)
      {
        
      }
      else
      {
        
      }
  }

  private async Task UpdateUserRoleAsync()
  {
    try
    {
      var apiResponse = await _httpClientHelper.PostAsync<AddUserRoleRequestDto, NotificationResponse>(
        endpoint: Path.Combine(EndpointConstant.CET_Base_Url, EndpointConstant.CET_UserRole_Update),
        data: new AddUserRoleRequestDto()
        {
          UserId = new Guid("7604fd9c-2739-4e59-b765-6b225bb7ebf5"),
          UserRoles = Roles
        },
        requestType: CHttpClientType.Private,
        portalType: CPortalType.CET);
      
      if (apiResponse != null && apiResponse.Data != null)
      {
        _notificationResponse = apiResponse.Data;
      }
    }
    catch(Exception ex)
    {
      _toastService.ShowError(ex.Message);
    }
    finally
    {

    }
  }
  private void OnPermissionChange(UserRoleProperty roleSelected, ResourceProperty resource, PermissionProperty permission, object? newValue)
  {
      if (bool.TryParse(newValue?.ToString(), out bool isChecked))
      {
          permission.HasPermission = isChecked;
          int permissionCount = 0;
          foreach(var role in Roles)
          {
            if (role.RoleId == roleSelected.RoleId)
            {
              foreach(var rs in role.Resources)
              {
                  if (rs.ResourceType == resource.ResourceType)
                  {
                    foreach(var pt in rs.PermissionTypes)
                    {
                      if (pt == permission)
                      {
                        pt.HasPermission = isChecked;
                      }
                      if (isChecked || pt.HasPermission)
                      {
                        permissionCount++;
                      }
                    }
                  }
              }
              role.HasRole = permissionCount > 0;
            }
          };        
      }
  }

  protected override async Task OnInitializedAsync()
  {
    var apiResponse = await _httpClientHelper.GetAsync<List<UserRoleProperty>>(
      endpoint: "https://localhost:7201/api/v1/cet/userrole/7604fd9c-2739-4e59-b765-6b225bb7ebf5",
      requestType: CHttpClientType.Private,
      portalType: CPortalType.CET);
    
    if (apiResponse == null)
    {

    }
    else if (apiResponse != null && apiResponse.Data != null)
    {
      Roles = apiResponse.Data;
      if (Roles.Count > 0)
      {
          selectedRole = Roles[0];
      }
    }
  }

  private void SelectTab(int index)
  {
    if (Roles != null && index >= 0 && index < Roles.Count)
    {
        selectedTabIndex = index;
        selectedRole = Roles[index];
    }
  }

  void ToggleExpandResource(ResourceProperty resource)
  {
    if (!expandedResources.Add(resource))
        expandedResources.Remove(resource);
  }
}
